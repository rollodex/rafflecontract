// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract Raffle is ReentrancyGuard {
    using SafeMath for uint256;

    address public owner;
    IERC20 public wSOL;
    uint256 public ticketPriceInwSOL;
    uint256 public maxTickets;
    uint256 public totalTicketsSold;
    bool public isRaffleOpen;
    uint256 public endTime;
    uint256 public winner;

    uint256 public nextRaffleStartTime; // Added variable for next raffle start time
    uint256 public timeoutDuration = 3 minutes; // Added timeout duration between raffles

    mapping(address => uint256) public ticketsBought;

    //Change (M): Get rid of participant lookup function. Map participants to winning addresses.
    mapping (uint256 => address) public ticketHolder;

    event TicketPurchased(address buyer, uint256 amount);
    event RaffleOpened(uint256 ticketPriceInSol, uint256 maxTickets);
    event RaffleClosed(uint256 winner);
    event WinnerSelected(uint winner, uint prizeAmount);

    //Change (M): Remove max tickets from constructor, cap the tickets at 50
    constructor(address _wSOL, uint256 _ticketPriceInwSOL) {
        require(_wSOL != address(0), "Invalid wSOL address");

        owner = msg.sender;
        wSOL = IERC20(_wSOL);
        ticketPriceInwSOL = _ticketPriceInwSOL;
        maxTickets = 50; //Ticket Cap
        isRaffleOpen = false;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can perform this action");
        _;
    }

    modifier raffleOpen() {
        require(isRaffleOpen, "Raffle is not open");
        _;
    }

    function startRaffle() external onlyOwner {
        require(!isRaffleOpen && block.timestamp >= nextRaffleStartTime, "Raffle cannot be started yet or already open");
        isRaffleOpen = true; // Directly set isRaffleOpen to true
        endTime = block.timestamp + timeoutDuration; // Set the end time for 3 minutes later
        totalTicketsSold = 0; // Reset total tickets sold
        emit RaffleOpened(ticketPriceInwSOL, maxTickets);
    }

    function openRaffle() external onlyOwner {
        require(!isRaffleOpen, "Raffle is already open");
        isRaffleOpen = true;
        totalTicketsSold = 0;
        endTime = block.timestamp + timeoutDuration; // Set the end time for 3 minutes later
        nextRaffleStartTime = 0; // Reset next raffle start time
        emit RaffleOpened(ticketPriceInwSOL, maxTickets);
    }

    //Change (M): Tickets are sequential at time of purchase
    function buyTicket() external raffleOpen nonReentrant {
        require(totalTicketsSold < maxTickets, "Maximum tickets sold");

        uint256 ticketNumber = 1;
        require(ticketNumber >= 1 && ticketNumber <= 50, "Invalid random number generated");
        require(ticketsBought[msg.sender] == 0, "Already purchased a ticket");

        uint256 totalCost = ticketPriceInwSOL;
        require(wSOL.transferFrom(msg.sender, address(this), totalCost), "Payment transfer failed");

        ticketsBought[msg.sender] = ticketNumber;
        ticketHolder[ticketNumber] = msg.sender; 

        ticketNumber = ticketNumber.add(1);

        totalTicketsSold = totalTicketsSold.add(1);

        emit TicketPurchased(msg.sender, 1);

        // Check if all tickets are sold out, then start the next raffle
        if (totalTicketsSold == maxTickets) {
            closeRaffle();
        }
    }

    function startRaffleInternal() internal {
    require(!isRaffleOpen && block.timestamp >= nextRaffleStartTime, "Raffle cannot be started yet or already open");
    isRaffleOpen = true; // Directly set isRaffleOpen to true
    endTime = block.timestamp + timeoutDuration; // Set the end time for 3 minutes later
    totalTicketsSold = 0; // Reset total tickets sold
    emit RaffleOpened(ticketPriceInwSOL, maxTickets);
}


    function closeRaffle() public onlyOwner {
        require(isRaffleOpen, "Raffle is not open");
        require(block.timestamp >= endTime || totalTicketsSold == maxTickets, "Raffle cannot be closed yet");
        require(totalTicketsSold > 0, "Need sales to close raffle"); //Change (M) function won't complete unless at least one ticket bought

        isRaffleOpen = false;

        if (totalTicketsSold > 0) {
            winner = generateRandomNumber();
            emit WinnerSelected(winner, 0); // Prize amount is not relevant for random selection
        }

        //Change (M) Pay the winner:
        redeem();

        emit RaffleClosed(winner);

        // Reset for the next raffle
        totalTicketsSold = 0;
        nextRaffleStartTime = block.timestamp + timeoutDuration;

        // Automatically start the next raffle if the conditions are met (Goo's contribution)
        if (nextRaffleStartTime <= block.timestamp) {
            startRaffleInternal();
        }
    }

    function redeem() internal {
        //require(winner != 0, "There must be a winner.");

        uint prizeAmount; 
        address winner2 = ticketHolder[winner]; //Change (M) direct lookup of winner

        // Calculate prize (half of the total balance)
        prizeAmount = wSOL.balanceOf(address(this)).div(2);

        require(wSOL.transfer(winner2, prizeAmount), "Prize transfer failed");
            emit WinnerSelected(winner, prizeAmount);

        // Transfer remaining balance to owner
        uint256 remainingBalance = wSOL.balanceOf(address(this));
        require(wSOL.transfer(owner, remainingBalance), "Remaining transfer failed");
        
    }

    //Change (M) Random is now between 0 and totalTicketsSold, so there is always a winner
    function generateRandomNumber() internal view returns (uint256) {
        return uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, totalTicketsSold))) % totalTicketsSold;
    }

    function shutdownRaffle() external onlyOwner {
        require(isRaffleOpen, "Raffle is not open");
        isRaffleOpen = false;
    }
}
